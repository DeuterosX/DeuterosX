<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComponentAlreadyRegistered" xml:space="preserve">
    <value>The custom component {0} has already been registered.</value>
    <comment>Represents the error message shown when a custom component is registered for the second time.</comment>
  </data>
  <data name="ComponentMissingType" xml:space="preserve">
    <value>A custom component has no defined type.</value>
    <comment>Represents the error message shown when a custom component is specified without its type.</comment>
  </data>
  <data name="ComponentTypeNotFound" xml:space="preserve">
    <value>The custom component type {0} could not be found.</value>
    <comment>Represents the error message shown when a custom component has an invalid type specified.</comment>
  </data>
  <data name="ComponentTypeNotInitialized" xml:space="preserve">
    <value>The custom component type {0} could not be instantized.</value>
    <comment>Represents the error message shown when a custom component could not be instantized.</comment>
  </data>
  <data name="FontAlreadyRegistered" xml:space="preserve">
    <value>The font {0} has already been registered.</value>
    <comment>Represents the error message shown when a font has already been registered.</comment>
  </data>
  <data name="FontCouldNotBeLoaded" xml:space="preserve">
    <value>The font {0} could not be loaded.</value>
    <comment>Represents the error message shown when a font could not be loaded.</comment>
  </data>
  <data name="FontDefinitionVersion" xml:space="preserve">
    <value>Font definition file version: {0}</value>
    <comment>Represents the format in which font definition version is logged.</comment>
  </data>
  <data name="FontUndefined" xml:space="preserve">
    <value>The font {0} is not defined.</value>
    <comment>Represents the error message shown when a font is not defined.</comment>
  </data>
  <data name="GameInfoVersion" xml:space="preserve">
    <value>Mod game info file version: {0}</value>
    <comment>Represents the format in which game info version is logged.</comment>
  </data>
  <data name="GameScreenDefinitionVersion" xml:space="preserve">
    <value>Game screen definition file version: {0}</value>
    <comment>Represents the format in which game screen definition version is logged.</comment>
  </data>
  <data name="GameScreenAlreadyRegistered" xml:space="preserve">
    <value>The game screen {0} has already been registered.</value>
    <comment>Represents the error message shown when a custom component is registered for the second time.</comment>
  </data>
  <data name="GameScreenMissingType" xml:space="preserve">
    <value>A game screen has no defined type.</value>
    <comment>Represents the error message shown when a custom component is specified without its type.</comment>
  </data>
  <data name="GameScreenTypeNotFound" xml:space="preserve">
    <value>The game screen type {0} could not be found.</value>
    <comment>Represents the error message shown when a custom component has an invalid type specified.</comment>
  </data>
  <data name="GameScreenTypeNotInitialized" xml:space="preserve">
    <value>The game screen type {0} could not be instantized.</value>
    <comment>Represents the error message shown when a custom component could not be instantized.</comment>
  </data>
  <data name="InvalidVirtualPathException" xml:space="preserve">
    <value>Virtual path invalid: {0}</value>
    <comment>Represents the error message shown when the specified virtual path is invalid.</comment>
  </data>
  <data name="ModFileIsInIncorrectFormatException" xml:space="preserve">
    <value>The specified mod file is in incorrect format: {0}</value>
    <comment>Represents the error message shown when the specified mod file is in incorrect format.</comment>
  </data>
  <data name="ModFileIsInIncorrectFormatSpecificException" xml:space="preserve">
    <value>The specified mod file is in incorrect format: {0}
Value '{1}' is invalid for the option '{2}'.</value>
    <comment>Represents the error message shown when detailed information is available about the incorrect format of the specified mod.</comment>
  </data>
  <data name="ModNotFoundException" xml:space="preserve">
    <value>The specified mod wasn't found: {0}</value>
    <comment>Represents the error message shown when the specified mod wasn't found.</comment>
  </data>
  <data name="TextureAlreadyRegistered" xml:space="preserve">
    <value>The texture {0} has already been registered.</value>
    <comment>Represents the error message shown when a texture has already been registered.</comment>
  </data>
  <data name="TextureCouldNotBeLoaded" xml:space="preserve">
    <value>The texture {0} could not be loaded.</value>
    <comment>Represents the error message shown when a texture could not be loaded.</comment>
  </data>
  <data name="TextureDefinitionVersion" xml:space="preserve">
    <value>Texture definition file version: {0}</value>
    <comment>Represents the format in which texture definition version is logged.</comment>
  </data>
  <data name="TextureNotLoaded" xml:space="preserve">
    <value>The texture {0} was requested without loading.</value>
    <comment>Represents the error message shown when a texture is used without being loaded first.</comment>
  </data>
  <data name="TextureUndefined" xml:space="preserve">
    <value>The texture {0} is not defined.</value>
    <comment>Represents the error message shown when a texture is not defined.</comment>
  </data>
  <data name="TextureUserOverflow" xml:space="preserve">
    <value>The texture {0} was unloaded too many times.</value>
    <comment>Represents the error message shown when a texture is unloaded more times than it was loaded.</comment>
  </data>
  <data name="TypeNotFound" xml:space="preserve">
    <value>The type {0} could not be found.</value>
    <comment>Represents the error message shown when a type could not be found.</comment>
  </data>
  <data name="TypeNotInitialized" xml:space="preserve">
    <value>The type {0} could not be initialized.</value>
    <comment>Represents the error message shown when a type could not be initialized.</comment>
  </data>
  <data name="FaceAlreadyRegistered" xml:space="preserve">
    <value>The face '{0}' has already been registered.</value>
    <comment>Represents the error message shown when a face has already been registered.</comment>
  </data>
  <data name="TypeAlreadyRegistered" xml:space="preserve">
    <value>The type {0} has already been registered.</value>
    <comment>Represents the error message shown when a type has already been registered.</comment>
  </data>
  <data name="GameScreenNotFound" xml:space="preserve">
    <value>The game screen {0} was not found.</value>
    <comment>Represents the error message shown when the specified game screen was not loaded from GameScreens.xml.</comment>
  </data>
  <data name="ModFileNotFoundException" xml:space="preserve">
    <value>The specified mod file wasn't found: {0}, original path: {1}</value>
    <comment>Represents the error message shown when a non-existent file is requested.</comment>
  </data>
  <data name="TypeDefinitionVersion" xml:space="preserve">
    <value>Type definition file version: {0}</value>
    <comment>Represents the format in which type definition version is logged.</comment>
  </data>
</root>